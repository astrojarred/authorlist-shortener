# authorlist-shortener
# v0.1
# by Jarred Green
# astrojarred@gmail.com

'''
This script takes a bibtex file as input and reduces the author lists to a max number and automatically adds an 'et al.'
NOTES:
1.  This was tested with and designed for the automatic bibtex entries generated by ADS
2.  If it raises a UndefinedString error, probably you have an entry or entries
    that aren't contained in quotes or curly brackets (often months and years)

REQUIREMENTS:
1.  bibtexparser to automatically turn the bibtex file into a dict (can use pip install bibtexparser)
2.  ntpath to automatically split filepath and filenames across systems
3.  sys to accept inputs from terminal
'''

# imports
import bibtexparser
import ntpath
import sys

# defs
def reduce_authors(bib_database_orig, bib_database_new, maxauthors):
    '''Takes care of reducing the authorlists'''
    n_entries = len(bib_database_orig.entries)
    print('Total number of entries in file:', n_entries)
    print('Reducing the author lists to a max numer of authors of %d' % maxauthors)
    author_count = {}
    for idx, entry in enumerate(bib_database_new.entries):
        author_count[entry['title']] = entry['author'].count('and') + 1
        print('')
        print('Analyzing paper %d of %d: %s' % (idx+1, n_entries, entry['title']))
        num_authors = entry['author'].count('and') + 1
        if len(entry['author']) > 100:
            print('author list: %s ...' % entry['author'][:100])
        else:
            print('author list: %s' % entry['author'])

        print('number of authors: %d' % num_authors)
        if num_authors > maxauthors:
            print('%d is greater then max number of authors of %d' % (num_authors, maxauthors) )
            print('shortening author list')
            andcut = entry['author'].find('and')
            entry['author'] = entry['author'][:andcut] + 'and others'
            print('new author list: %s' % entry['author'])
        else:
            print('author list is shorter than cutoff, no action taken')
        
    return bib_database_new


def get_new_filename(filepath, maxauthors):
    '''Generates a new filename containing the max number of authors'''
    prev_filename, prev_ext = ntpath.splitext(ntpath.basename(filepath))
    newfilename = '%s_max%dauthors%s' % (prev_filename, maxauthors, prev_ext)
    og_filepath = ntpath.split(filepath)[0]
    newfilepath = '%s/%s' % (og_filepath, newfilename)
    
    return newfilename, newfilepath


# main code

# get the filename and maxauthors
version = 'v0.1'
file = sys.argv[1]
maxauthors = int(sys.argv[2])

print('Welcome to authorlist-shortener version %s' % version)
print('written by Jarred Gershon Green, astrojarred@gmail.com')
print('Opening the file %s' % file)
print('A new .bib file will be generated with no more than %d authors per entry' % maxauthors)

# open two copies of the file, one that will remain the same (orig), and one that will be edited (new)
with open(file) as bibtex_file:
    bib_database_orig = bibtexparser.load(bibtex_file)
    
with open(file) as bibtex_file:
    bib_database_new = bibtexparser.load(bibtex_file)



# reduce the number of authors if greater than max and replace with 'and others'
reduced_authors = reduce_authors(bib_database_orig, bib_database_new, maxauthors)
print('')
print('Done analyzing author lists')

# get the new filename
newfilename, newfilepath = get_new_filename(file, maxauthors)

# load the bibtexparser writer
writer = bibtexparser.bwriter.BibTexWriter()

# write the file with the new name into the same directory
print('')
print('writing file %s' % newfilename)

with open(newfilepath, 'w+') as bibfiletowrite:
    bibfiletowrite.write(writer.write(bib_database_new))

print('file written to %s' % newfilepath)
print('script complete, exiting!')
print('')
